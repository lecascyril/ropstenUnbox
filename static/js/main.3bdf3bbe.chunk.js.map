{"version":3,"sources":["getWeb3.js","Address.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","alert","location","reload","console","log","provider","providers","HttpProvider","Address","className","this","props","addr","React","Component","App","state","storageValue","accounts","contract","addresses","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","options","fromBlock","toBlock","options1","getPastEvents","listAddress","events","dataStored","event","push","methods","get","call","response","setState","error","runSet","valeur","document","getElementById","value","set","send","from","transac","returnValues","data","type","id","onClick","map","addresse","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bdf3bbe.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('disconnect',function(){\n            alert(\"il faut se connecter\");\n          });\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });     \n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n       \n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;","import React from 'react';\nimport './Address.css';\n\n\nexport default class Address extends React.Component {\n\n\n    render(){\n        return(\n            <div className='header'><p>Voici l'adress que vous utilisez: </p>{this.props.addr}</div>\n        )\n    }\n\n}","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Address from \"./Address.js\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, addresses: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      let options = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n\n      let options1 = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      };\n\n      let listAddress = await instance.getPastEvents('dataStored', options);\n\n      instance.events.dataStored(options1)\n\t\t\t\t\t\t  .on('data', event => listAddress.push(event));\n      const response = await instance.methods.get().call();\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ storageValue: response, web3, accounts, contract: instance, addresses:listAddress });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runSet = async () => {\n    const { accounts, contract} = this.state;\n    let valeur=document.getElementById(\"valeur\").value;\n    const transac = await contract.methods.set(valeur).send({ from: accounts[0] });\n    const response = await contract.methods.get().call();\n\n\n\n    console.log(\"l'adresse est celle ci: \" + transac.events.dataStored.returnValues.addr);\n    console.log(\"la data est celle ci: \" + transac.events.dataStored.returnValues.data);\n    console.log(transac);\n\n    this.setState({ storageValue: response });\n    };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Address addr={this.state.accounts} />        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <p>\n          Try changing the value by setting it via the input:\n        </p>\n        <input type=\"text\" id=\"valeur\" />\n        <button onClick={this.runSet}>Set the value you wrote inside the blockchain</button>\n        <br />\n        <p>Here is the addresses that interacted with the contract, and the value they put</p>\n        <table>\n        {this.state.addresses.map((addresse) => (\n          <tr><td>{addresse.returnValues.addr}</td><td>{addresse.returnValues.data}</td></tr>\n        ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}