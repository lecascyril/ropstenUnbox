{"ast":null,"code":"var _jsxFileName = \"/root/dev/Ropsten/unbox/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      addresses: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address);\n        let options = {\n          fromBlock: 0,\n          //Number || \"earliest\" || \"pending\" || \"latest\"\n          toBlock: 'latest'\n        };\n        const listAddress = await instance.getPastEvents('dataStored', options);\n        instance.events.dataStored(options).on('data', event => listAddress += event);\n        const response = await instance.methods.get().call(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          storageValue: response,\n          web3,\n          accounts,\n          contract: instance,\n          addresses: listAddress\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.runSet = async () => {\n      const {\n        accounts,\n        contract\n      } = this.state;\n      let valeur = document.getElementById(\"valeur\").value;\n      const transac = await contract.methods.set(valeur).send({\n        from: accounts[0]\n      });\n      const response = await contract.methods.get().call(); // getting the events  \n\n      let options = {\n        fromBlock: 0,\n        //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const listAddress = await contract.getPastEvents('dataStored', options);\n      console.log(\"l'adresse est celle ci: \" + transac.events.dataStored.returnValues.addr);\n      console.log(\"la data est celle ci: \" + transac.events.dataStored.returnValues.data);\n      console.log(transac);\n      this.setState({\n        storageValue: response,\n        addresses: listAddress\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Web3, accounts, and contract...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Good to Go!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your Truffle Box is installed and ready.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Smart Contract Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"The stored value is: \", this.state.storageValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Try changing the value by setting it via the input:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"valeur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.runSet,\n        children: \"Set the value you wrote inside the blockchain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Here is the addresses that interacted with the contract, and the value they put\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: this.state.addresses.map(addresse => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: addresse.returnValues.addr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: addresse.returnValues.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 52\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","SimpleStorageContract","getWeb3","App","state","storageValue","web3","accounts","contract","addresses","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","options","fromBlock","toBlock","listAddress","getPastEvents","events","dataStored","on","event","response","methods","get","call","setState","error","alert","console","runSet","valeur","document","getElementById","value","transac","set","send","from","log","returnValues","addr","data","render","map","addresse"],"sources":["/root/dev/Ropsten/unbox/client/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, addresses: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      let options = {\n        fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n        toBlock: 'latest'\n      };\n      const listAddress = await instance.getPastEvents('dataStored', options);\n\n      instance.events.dataStored(options)\n\t\t\t\t\t\t  .on('data', event => listAddress+=event) ;\n\n\n      const response = await instance.methods.get().call();\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ storageValue: response, web3, accounts, contract: instance, addresses:listAddress });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runSet = async () => {\n    const { accounts, contract} = this.state;\n    let valeur=document.getElementById(\"valeur\").value;\n    const transac = await contract.methods.set(valeur).send({ from: accounts[0] });\n    const response = await contract.methods.get().call();\n\n    // getting the events  \n    let options = {\n      fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: 'latest'\n    };\n    const listAddress = await contract.getPastEvents('dataStored', options);\n\n    console.log(\"l'adresse est celle ci: \" + transac.events.dataStored.returnValues.addr);\n    console.log(\"la data est celle ci: \" + transac.events.dataStored.returnValues.data);\n    console.log(transac);\n\n    this.setState({ storageValue: response, addresses:listAddress });\n    };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <p>\n          Try changing the value by setting it via the input:\n        </p>\n        <input type=\"text\" id=\"valeur\" />\n        <button onClick={this.runSet}>Set the value you wrote inside the blockchain</button>\n        <br />\n        <p>Here is the addresses that interacted with the contract, and the value they put</p>\n        <table>\n        {this.state.addresses.map((addresse) => (\n          <tr><td>{addresse.returnValues.addr}</td><td>{addresse.returnValues.data}</td></tr>\n        ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}